- A function bundled with its lexical scope is closure
- Below is simple example of Closure:
		function x(){
			let a = 10;
			function y(){
				console.log(a);
			}
			y();
		}
				
		x();
		
		Explanation: Here the output will be 10 since function y gets access to its lexical parent x, and a forms a closure of x to y.
		
- When function returned from another function they still return their lexical scope
		
		function x(){
			let a = 10;
			function y(){
				console.log(a);
			}
			return y;
		}
		var z = x();
		z();
		
		Here the output will be 10, even though a vanished at line 120, the return value of y contains the closure of x which it executes
		at line 121
		
- When function returned from another function, closure will refer to reference and not the actual value

		function x(){
			let a = 10;
			function y(){
				console.log(a);
			}
			a = 100;
			return y;
		}
		var z = x();
		z();

		Here the output will be 100 not 7 because y refers to the reference of a from closure of x
		
- Closure works with its deep nested parent as well

		function z(){
			var b = 20;
			function x(){
				let a = 10;
				function y(){
					console.log(a, b);
				}
				y();
			}
			x();
		}
		z();
		
		Here closure of both z and x are available for function y.
		
- Uses of Closures:
	- Module design pattern
	- function currying
	- memoize
	- function like once
	- maintain state in async world
	- SetTimeouts
	- Iterators
	- and many more
	
----------------------------------------------------------------------------------------------------------------------------------------------------------------
SetTimeout and Closures
----------------------------------------------------------------------------------------------------------------------------------------------------------------

- Lets consider below simple example

	function x(){
	  var i = 1;
	  setTimeOut(function(){
		console.log(i);
	  }, 3000);
	  console.log("Why I printed before?");
	}
	
	Explanation :
		- Here the output will be:
			Why I printed before?
			1 
		-as per closure of x is passed to the function passed a paramater to setTimeOut function and that function holds the closure of x
		
- Consider Below Example of setTimeOut in for loop

	function x(){
	  for(var i = 1; i<=5; i++){
	     setTimeOut(function(){
		  console.log(i);
	    }, i*1000);
	  } 
	}
	
	x();
		
	Here output will be 6 printed 5 times after every conditional seconds we added
	
	**Explanation:
		- As we know closure refers to the reference and not the value, in the above example value of i is incremented and 
		  loop is completed first then setTimeOut function and till the time setTimeOut starts printing its value the reference 
		  to the closure gets the incremented value of i.

	**To solve this problem replace var declaration of i with let
		- Since we all know let belongs to block scope, on every incremented value of i a block scope of i is created since let treats it as
		  a new variable and forms the closure to the function passed in setTimeOut function.
		  
	**What if interviewer ask to solve this problem using var itself

	function x(){
	  for(var i = 1; i<=5; i++){
	     function close(x){
		   setTimeOut(function(){
			 console.log(x);
	       }, x*1000);
		 }
		 close(i);
	  } 
	}
	
	x();
	
	Explanation: 
		- The above problem we have solved using closure itself
		- On every increment we are passing a value of variable declared with var i as a function parameter of close function
		  So on every function call of close(i), i becomes the closure of for loop to function close() and hence it fetch 
		  the incremented closure of i everytime.
		  
		  
Most asked in Interview: https://www.youtube.com/watch?v=t1nFAMws5FI&list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP&index=14

Disadvantages of Closure:
- Overconsumptions of memory since those variables are not garbage collected
